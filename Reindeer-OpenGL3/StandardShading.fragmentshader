#version 120

varying vec3 Position_worldspace;
varying vec3 Normal_worldspace;
varying vec3 test;

uniform vec3 LightPosition_worldspace;

void main(){
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 50.0f;
	
	vec3 MaterialDiffuse = vec3(0.5, 0.5, 0.5);
	vec3 MaterialAmbient = vec3(0.1,0.1,0.1) * MaterialDiffuse;
	vec3 MaterialSpecular = vec3(0.3,0.3,0.3);

	vec3 LightDiffuse = vec3(0.5, 0.5, 0.5);

	vec3 diffuse = MaterialDiffuse * LightDiffuse;
	vec3 ambient = MaterialAmbient;
	
	vec4 ambientGlobal = gl_LightModel.ambient * gl_FrontMaterial.ambient;

	vec3 lightDirection = Position_worldspace - LightPosition_worldspace;
	float dist = length( lightDirection );

	vec3 n = normalize(Normal_worldspace);
	vec3 l = normalize(lightDirection);
	float cosTheta = clamp(dot(n, l), 0, 1);
	
	vec3 color;
	
	float constantAtt = 0;
	float linearAtt = 0.125;
	float quadraticAtt = 0;
	float att = 1 / (constantAtt + linearAtt * dist + quadraticAtt * dist * dist);

	if (cosTheta > 0.0) {
		color = att * (diffuse * cosTheta + ambient);
	}
	
	gl_FragColor.rgb = color;
}
