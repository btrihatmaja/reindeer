#version 120

varying vec3 Position_worldspace;
varying vec3 Normal_worldspace;
varying vec3 test;

uniform vec3 LightPosition_worldspace;
uniform mat4 V_inv;

void main(){
	gl_LightSourceParameters light0;
	light0.diffuse = vec4(0.5,0.5,0.5,1.0);
	//light0.specular = vec4(1.0, 1.0, 1.0, 1.0);
	light0.constantAttenuation = 0.0;
	light0.linearAttenuation = 0.125;
	light0.quadraticAttenuation = 0.0;
	
	gl_MaterialParameters frontMaterial;
	frontMaterial.ambient = vec4(1.0,1.0,1.0,1.0);
	frontMaterial.diffuse = vec4(1.0,1.0,1.0,1.0);
	//frontMaterial.specular = vec4(1.0, 1.0, 1.0, 1.0);
	
	vec4 sceneAmbient = vec4(0.2, 0.2, 0.2, 1.0);

	vec3 lightDirection = Position_worldspace - LightPosition_worldspace;
	float dist = length( lightDirection );

	vec3 n = normalize(Normal_worldspace);
	vec3 l = normalize(lightDirection);
	float cosTheta = max(0.0, dot(n, l));

	vec3 viewDirection = normalize(vec3(V_inv * vec4(0.0, 0.0, 0.0, 1.0)) - Position_worldspace);

	vec3 totalLighting = vec3(sceneAmbient) * vec3(frontMaterial.ambient);
		
	float attenuation = 1 / (light0.constantAttenuation + 
	                         light0.linearAttenuation * dist +
	                         light0.quadraticAttenuation * dist * dist);

	vec3 diffuseReflection = attenuation *
	                         vec3(light0.diffuse) *
	                         vec3(frontMaterial.diffuse) *
	                         cosTheta;
	
	vec3 specularReflection = attenuation *
	                          vec3(light0.specular) *
	                          vec3(frontMaterial.specular) *
	                          pow(max(0.0, dot(reflect(-l, n), viewDirection)), frontMaterial.shininess);

	totalLighting = totalLighting + diffuseReflection + specularReflection;

	gl_FragColor.rgb = totalLighting;
}
